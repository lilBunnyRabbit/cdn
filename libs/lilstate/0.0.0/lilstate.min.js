{class State extends EventTarget{#storage=new Map;#elements=new Map;#config={useChangeEvent:false,useLogs:false};constructor(config,initElements){super();if(config){this.#config={...this.#config,...config}}if(this.#config.useLogs){console.log("State",{config:this.#config})}if(initElements){Object.keys(initElements).forEach(key=>{const initElement=initElements[key];this.init(key,initElement)})}}get storage(){return this.#storage}get elements(){return this.#elements}get config(){return this.#config}set(key,value,config){this.#storage.set(key,value);if(config.useLocalStorage){localStorage.setItem(key,this.#valueToString(value))}if(config.useEvents){this.dispatchEvent(new CustomEvent(key,{detail:value}));if(this.#config.useChangeEvent){this.dispatchEvent(new CustomEvent("change",{detail:{key:key,value:value}}))}}}get(key){return this.#storage.get(key)}#valueToString(value){switch(typeof value){case"bigint":case"boolean":case"symbol":case"number":return value.toString();case"object":return JSON.stringify(value);case"string":return value;case"undefined":case"function":default:throw new Error(`Value type "${typeof value}" is not supported`)}}#valueFromString(value,type){switch(type){case"bigint":return BigInt(value);case"boolean":return Boolean(value);case"symbol":return Symbol(value);case"number":return Number.parseFloat(value);case"object":return JSON.parse(value);case"string":return value;case"undefined":case"function":default:throw new Error(`Value type "${typeof value}" is not supported`)}}init(key,opts){if(this.#elements.get(key)){throw new Error("Element already initialized")}const type=typeof opts.defaultValue;if(type==="function"||type==="undefined"){throw new Error(`Value type "${type}" is not supported`)}let value=opts.defaultValue;if(opts.config?.useLocalStorage){const localValue=localStorage.getItem(key);if(localValue!==null){value=this.#valueFromString(localValue,type)}}this.set(key,value,{...opts.config,useEvents:false});const element=new StateElement(this,key,opts);this.#elements.set(key,element);return element}attach(key){const element=this.#elements.get(key);if(!element){throw new Error("Element not initialized")}return element}}class StateElement{#state=null;#key="";#defaultValue=undefined;#type="";#config={useLocalStorage:false,useEvents:false,onBeforeSet:null};constructor(state,key,opts){this.#state=state;this.#key=key;this.#defaultValue=opts.defaultValue;this.#type=typeof opts.defaultValue;if(opts.config){this.#config={...this.#config,...opts.config}}if(this.#state.config.useLogs){console.log("StateElement",{key:this.#key,defaultValue:this.#defaultValue,type:this.#type,config:this.#config})}}get state(){return this.#state}get key(){return this.#key}get defaultValue(){return this.#defaultValue}get type(){return this.#type}get config(){return this.#config}get(){return this.#state.get(this.#key)}set(value){if(typeof value!==this.#type){throw new Error(`Expected value type "${this.#type}" but got "${typeof value}"`)}if(this.#config.onBeforeSet){value=this.#config.onBeforeSet(value)}this.#state.set(this.#key,value,this.#config)}reset(){this.set(this.#defaultValue)}addListener(listener){this.#state.addEventListener(this.#key,({detail})=>listener(detail));return this}}class StateComponent{#state=null;states={};constructor(state,elements){this.#state=state;const prototype=Object.getPrototypeOf(this);const overrides={$onStateChange:prototype.hasOwnProperty("$onStateChange")};let events=[];if(elements===true){for(const element of this.#state.elements.values()){const key=element.key;events.push(key);this.states[key]=element;if(overrides.$onStateChange){this.states[key].addListener(value=>this.$onStateChange(key,value))}}}else if(elements){events=elements;elements.forEach(key=>{this.states[key]=this.#state.attach(key);if(overrides.$onStateChange){this.states[key].addListener(value=>this.$onStateChange(key,value))}})}else if(overrides.$onStateChange){events.push("change");this.#state.addEventListener("change",({detail})=>this.$onStateChange(detail.key,detail.value))}Object.freeze(this.states);if(this.#state.config.useLogs){console.log("StateComponent",{class:this.constructor.name,stateElements:Object.keys(this.states),overrides:overrides,events:events})}}$onStateChange(key,value){console.log(this.constructor.name,"$onStateChange",{key:key,value:value})}$resetAll(){Object.keys(this.states).forEach(key=>this.states[key].reset())}}window.lilState={State:State,StateElement:StateElement,StateComponent:StateComponent}}