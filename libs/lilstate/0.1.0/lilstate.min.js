(()=>{"use strict";class t{#t=null;#e="";#s=void 0;#n="";#i={useLocalStorage:!1,useEvents:!1,onBeforeSet:null};constructor(t,e,s){this.#t=t,this.#e=e,this.#s=s.defaultValue,this.#n=typeof s.defaultValue,s.config&&(this.#i={...this.#i,...s.config}),this.#t.config.useLogs&&console.log("StateElement",{key:this.#e,defaultValue:this.#s,type:this.#n,config:this.#i})}get state(){return this.#t}get key(){return this.#e}get defaultValue(){return this.#s}get type(){return this.#n}get config(){return this.#i}get(){return this.#t.get(this.#e)}set(t){if(typeof t!==this.#n)throw new Error(`Expected value type "${this.#n}" but got "${typeof t}"`);this.#i.onBeforeSet&&(t=this.#i.onBeforeSet(t)),this.#t.set(this.#e,t,this.#i)}reset(){this.set(this.#s)}addListener(t){return this.#t.addEventListener(this.#e,(({detail:e})=>t(e))),this}}class e extends EventTarget{#a=new Map;#o=new Map;#i={useChangeEvent:!1,useLogs:!1,prefix:""};constructor(t,e){super(),t&&(this.#i={...this.#i,...t}),this.#i.useLogs&&console.log("State",{config:this.#i}),e&&Object.keys(e).forEach((t=>{const s=e[t];this.init(t,s)}))}get storage(){return this.#a}get elements(){return this.#o}get config(){return this.#i}#r(t){return this.#i.prefix?`${this.#i.prefix}-${t}`:t}set(t,e,s){this.#a.set(t,e),s.useLocalStorage&&localStorage.setItem(this.#r(t),this.#h(e)),s.useEvents&&(this.dispatchEvent(new CustomEvent(t,{detail:e})),this.#i.useChangeEvent&&this.dispatchEvent(new CustomEvent("change",{detail:{key:t,value:e}})))}get(t){return this.#a.get(t)}#h(t){switch(typeof t){case"bigint":case"boolean":case"symbol":case"number":return t.toString();case"object":return JSON.stringify(t);case"string":return t;default:throw new Error(`Value type "${typeof t}" is not supported`)}}#l(t,e){switch(e){case"bigint":return BigInt(t);case"boolean":return Boolean(t);case"symbol":return Symbol(t);case"number":return Number.parseFloat(t);case"object":return JSON.parse(t);case"string":return t;default:throw new Error(`Value type "${typeof t}" is not supported`)}}init(e,s){if(this.#o.get(e))throw new Error("Element already initialized");const n=typeof s.defaultValue;if("function"===n||"undefined"===n)throw new Error(`Value type "${n}" is not supported`);let i=s.defaultValue;if(s.config?.useLocalStorage){const t=localStorage.getItem(this.#r(e));null!==t&&(i=this.#l(t,n))}this.set(e,i,{...s.config,useEvents:!1});const a=new t(this,e,s);return this.#o.set(e,a),a}attach(t){const e=this.#o.get(t);if(!e)throw new Error("Element not initialized");return e}}window.lilState={State:e,StateElement:t,StateComponent:class{#t=null;states={};constructor(t,e){this.#t=t;const s={$onStateChange:Object.getPrototypeOf(this).hasOwnProperty("$onStateChange")};let n=[];if(!0===e)for(const t of this.#t.elements.values()){const e=t.key;n.push(e),this.states[e]=t,s.$onStateChange&&this.states[e].addListener((t=>this.$onStateChange(e,t)))}else e?(n=e,e.forEach((t=>{this.states[t]=this.#t.attach(t),s.$onStateChange&&this.states[t].addListener((e=>this.$onStateChange(t,e)))}))):s.$onStateChange&&(n.push("change"),this.#t.addEventListener("change",(({detail:t})=>this.$onStateChange(t.key,t.value))));Object.freeze(this.states),this.#t.config.useLogs&&console.log("StateComponent",{class:this.constructor.name,stateElements:Object.keys(this.states),overrides:s,events:n})}$onStateChange(t,e){console.log(this.constructor.name,"$onStateChange",{key:t,value:e})}$resetAll(){Object.keys(this.states).forEach((t=>this.states[t].reset()))}}}})();